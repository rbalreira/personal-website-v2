@use "variables" as v;

/// Responsive breakpoint manager
/// @access public
/// @param {string} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  $raw-query: map-get(v.$breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
      type-of($raw-query) == "string",
      unquote($raw-query),
      inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }
}

/// Align items at the center
/// @access public
@mixin justify-content-center() {
  display: flex;
  justify-content: center;
}

/// Transition ease-in-out timing-function
/// @access public
/// @param {seconds} $duration - Duration
/// @param {transition-property} $property - Transition property
@mixin transition-ease-in-out($duration: 0.2s, $property: "") {
  transition: #{$property} $duration ease-in-out;
}

/// Translate Y axis for specific element
/// @access public
/// @param {size} $value - Value
@mixin transform-translateY($value: -10px) {
  transform: translateY($value);
}

/// Adjust max-width of grid container system
/// @access public
@mixin adjust-grid-container() {
  @include respond-to("3-small-medium") {
    max-width: 550px;
  }

  @include respond-to("medium") {
    max-width: 650px;
  }

  @include respond-to("large") {
    max-width: 750px;
  }

  @include respond-to("extra-large") {
    max-width: 950px;
  }
}

/// Styles technologies stack for sections
/// @access public
@mixin style-tech-stack() {
  font-size: 0.9rem;
  font-family: var(--tech-stack-font-family);
  color: var(--tech-stack-color);

  p {
    line-height: 0.5rem;
  }
}
